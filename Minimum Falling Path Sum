Leetcode 931. Minimum Falling Path Sum

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

CODE:

class Solution {
public:
    int solve(vector<vector<int>>&m,int i,int j,vector<vector<int>>&dp){
        int n=m.size();
        if(i==n){return 0;}
        if(j==n || j==-1)return 1e9;
        if(dp[i][j]!=-60)return dp[i][j];
        else{
            int a=m[i][j]+solve(m,i+1,j-1,dp);
            int b=m[i][j]+solve(m,i+1,j,dp);
            int c=m[i][j]+solve(m,i+1,j+1,dp);
            return dp[i][j]=min(a,min(b,c));
        }
    }
    int minFallingPathSum(vector<vector<int>>& m) {
        int n=m.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-60));
        int ans=INT_MAX;
        for(int i=0;i<n;i++){
            ans=min(ans,solve(m,0,i,dp));
        }
        // ans=solve(m,0,0);
        return ans;

    }
};
